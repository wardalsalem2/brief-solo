document.getElementById("login-btn").addEventListener("click", function () {
  sessionStorage.setItem("fromSignUpPage", "true");
  if (sessionStorage.getItem("fromWelcomePage")) {
    sessionStorage.removeItem("fromWelcomePage");
  }
  window.location.href = "03-Login-Page.html";
});

const userSession = JSON.parse(sessionStorage.getItem("userSession") || "{}");
const loggedIn = userSession.loggedIn || false;

if (loggedIn) {
  sessionStorage.setItem("loggedIn", "true");
  alert("You are already logged in.");
  document.body.innerHTML = "";
  window.location.href = "04-Quiz-Select-Topic.html";
}

if (window.location.search || localStorage.getItem("banned") === "true") {
  alert("Unauthorized access detected.");
  document.body.innerHTML = "";
  window.location.href = "01-Welcome-Page.html";
}

document
  .getElementById("burger-menu-btn")
  .addEventListener("click", function () {
    document.getElementById("sidebar").classList.toggle("active");
  });

window.addEventListener("click", function (event) {
  const sidebar = document.getElementById("sidebar");
  const burgerMenuBtn = document.getElementById("burger-menu-btn");
  if (
    !sidebar.contains(event.target) &&
    !burgerMenuBtn.contains(event.target)
  ) {
    sidebar.classList.remove("active");
  }
});

window.addEventListener("scroll", function () {
  const navbar = document.querySelector("header");
  navbar.classList.toggle("sticky", window.scrollY > 0);
});

const usernameInput = document.getElementById("username");
const emailInput = document.getElementById("email");
const passwordInput = document.getElementById("password");
const confirmPasswordInput = document.getElementById("confirm-password");
const joinNowBtn = document.getElementById("join-now-btn");

const usernameValidation = document.getElementById("username-validation");
const emailValidation = document.getElementById("email-validation");
const passwordValidation = document.getElementById("password-validation");
const confirmPasswordValidation = document.getElementById(
  "confirm-password-validation"
);
const formValidationMessage = document.createElement("small");
formValidationMessage.classList.add("validation-message");
formValidationMessage.style.textAlign = "center";
formValidationMessage.style.display = "block";
joinNowBtn.parentNode.insertBefore(formValidationMessage, joinNowBtn);

let usernameTouched = false;
let emailTouched = false;
let passwordTouched = false;
let confirmPasswordTouched = false;

usernameInput.addEventListener("blur", () => {
  usernameTouched = true;
  validateForm();
});

usernameInput.addEventListener("input", () => {
  checkUsernameAvailability();
  validateForm();
});

emailInput.addEventListener("blur", () => {
  emailTouched = true;
  validateForm();
});

passwordInput.addEventListener("blur", () => {
  passwordTouched = true;
  validateForm();
});

confirmPasswordInput.addEventListener("blur", () => {
  confirmPasswordTouched = true;
  validateForm();
});

function checkUsernameAvailability() {
  const username = usernameInput.value;
  const existingUsername = Object.keys(localStorage).find(
    (key) => JSON.parse(localStorage.getItem(key)).username === username
  );

  if (existingUsername) {
    usernameValidation.textContent = "Username is not available.";
    usernameValidation.style.color = "var(--error-color)";
  } else if (username) {
    usernameValidation.textContent = "Username is available.";
    usernameValidation.style.color = "green";
  } else {
    usernameValidation.textContent = "";
  }
}

/**
 * Validates the form fields for username, email, password, and confirm password.
 * 
 * - Username: Can only contain letters and numbers.
 * - Email: Must be a valid email address format.
 * - Password: Must be at least 8 characters long and include letters, numbers, and special characters.
 *   Allowed special characters: @$!%*?&
 * - Confirm Password: Must match the password.
 * 
 * Additionally, checks if the username already exists in localStorage.
 * 
 * Updates the validation messages and the state of the "Join Now" button based on the validation results.
 */
function validateForm() {
  const username = usernameInput.value;
  const email = emailInput.value;
  const password = passwordInput.value;
  const confirmPassword = confirmPasswordInput.value;

  const usernameValid = /^[a-zA-Z0-9]+$/.test(username);
  const emailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const passwordValid =
    /^(?=.*[A-Za-z])(?=.*\d)(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])[A-Za-z\d!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]{8,}$/.test(
      password
    );
  const passwordsMatch = password === confirmPassword;

  if (usernameTouched && username) {
    usernameValidation.textContent = usernameValid
      ? usernameValidation.textContent
      : "Username can only contain letters and numbers.";
    if (!usernameValid) {
      usernameValidation.style.color = "var(--error-color)";
    }
  }

  if (emailTouched && email) {
    emailValidation.textContent = emailValid
      ? ""
      : "Please enter a valid email address.";
  }

  if (passwordTouched && password) {
    passwordValidation.textContent = passwordValid
      ? ""
      : "Password must be at least 8 characters long and include letters, numbers, and special characters.";
  }

  if (confirmPasswordTouched && confirmPassword) {
    confirmPasswordValidation.textContent = passwordsMatch
      ? ""
      : "Passwords do not match.";
  }

  const existingUsername = Object.keys(localStorage).find(
    (key) => JSON.parse(localStorage.getItem(key)).username === username
  );

  const allFieldsFilled = username && email && password && confirmPassword;
  formValidationMessage.textContent =
    (usernameTouched && !username) ||
    (emailTouched && !email) ||
    (passwordTouched && !password) ||
    (confirmPasswordTouched && !confirmPassword)
      ? "Please fill out all fields."
      : "";
  joinNowBtn.disabled = !(
    usernameValid &&
    emailValid &&
    passwordValid &&
    passwordsMatch &&
    !existingUsername &&
    allFieldsFilled
  );
  joinNowBtn.style.backgroundColor = joinNowBtn.disabled
    ? "gray"
    : "var(--primary-color)";
}

confirmPasswordInput.addEventListener("input", validateForm);

document
  .getElementById("signup-form")
  .addEventListener("submit", function (event) {
    event.preventDefault();

    const username = usernameInput.value;
    const email = emailInput.value;
    const password = passwordInput.value;
    const confirmPassword = confirmPasswordInput.value;

    if (!username || !email || !password || !confirmPassword) {
      if (!username) {
        usernameValidation.textContent = "Username is required.";
        usernameValidation.style.color = "var(--error-color)";
        usernameInput.style.borderColor = "var(--error-color)";
        usernameInput.focus();
      }
      if (!email) {
        emailValidation.textContent = "Email is required.";
        emailValidation.style.color = "var(--error-color)";
        emailInput.style.borderColor = "var(--error-color)";
        emailInput.focus();
      }
      if (!password) {
        passwordValidation.textContent = "Password is required.";
        passwordValidation.style.color = "var(--error-color)";
        passwordInput.style.borderColor = "var(--error-color)";
        passwordInput.focus();
      }
      if (!confirmPassword) {
        confirmPasswordValidation.textContent = "Confirm Password is required.";
        confirmPasswordValidation.style.color = "var(--error-color)";
        confirmPasswordInput.style.borderColor = "var(--error-color)";
        confirmPasswordInput.focus();
      }
      return;
    }

    const existingUsername = Object.keys(localStorage).find(
      (key) => JSON.parse(localStorage.getItem(key)).username === username
    );
    const existingEmail = Object.keys(localStorage).find(
      (key) => JSON.parse(localStorage.getItem(key)).email === email
    );

    if (existingUsername) {
      alert(
        "A user with this username already exists. Please choose a different username."
      );
    } else if (existingEmail) {
      alert(
        "A user with this email address already exists. Please double-check your entry."
      );
    } else {
      const userID = Date.now(); // Unique userID based on timestamp
      const userData = {
        userID: userID,
        username: username,
        email: email,
        password: password,
        registerDate: new Date().toISOString(),
      };
      localStorage.setItem(userID, JSON.stringify(userData));
      alert("You've successfully registered!");
      setTimeout(() => {
        if (sessionStorage.getItem("fromWelcomePage")) {
          sessionStorage.removeItem("fromWelcomePage");
        }
        sessionStorage.setItem("fromSignUpPage", "true");
        window.location.href = "03-Login-Page.html";
      }, 500);
    }
  });

setInterval(validateForm, 500);
